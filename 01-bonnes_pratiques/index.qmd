---
title: "Bulle d'R : Bonnes pratiques à ETTIS"
date: "2024-05-28"
date-format: long
lang: fr  
author:
  - name: Sandrine LYSER
    orcid: 0000-0001-6820-0672
    email: sandrine.lyser@inrae.fr
  - name: David CARAYON
    email: david.carayon@inrae.fr
    orcid: 0000-0003-0217-2175
format: 
  inrae-revealjs:
    footer: "Bulle d'R | Bonnes pratiques"
    transition: none
    logo: img/bloc-etat.png
    include-after-body: revealjs-clean-title-slide.html
    title-slide-attributes:
        data-background-image: img/sigle-inrae.png
        data-footer: "<a rel='license' href='https://www.etalab.gouv.fr/licence-ouverte-open-licence/'><img alt='Creative Commons License' style='border-width:0; width:200px' src='https://www.etalab.gouv.fr/wp-content/uploads/2011/10/licence-ouverte-open-licence.gif' /><br></a>Présentation diffusée sous <a rel='license' href='https://www.etalab.gouv.fr/licence-ouverte-open-licence/'>Licence ouverte</a>."
revealjs-plugins:
  - pointer
from: markdown+emoji
---

# INTRODUCTION GÉNÉRALE {.inverse}

# 1. Utiliser les logiciels R & RStudio {.inverse}

## Comment ça fonctionne ?

Cf. Présentation TWIX "Travailler sous R avec RStudio. Comment ça marche ?" disponible à ce lien :

<br>
<br>

<center>

{{< fa globe >}} [https://statire.github.io/bulledr/00-TWIX/TWIX_2023_06_01](https://statire.github.io/bulledr/00-TWIX/TWIX_2023_06_01){target="_blank"} {{< fa globe >}}

</center>

# 2. Gérer les packages {.inverse}

## Préambule : Version de R

Les packages R peuvent dépendre d'une version spécifique de R (ou version minimale)

![](img/vers_R.png)

Les nouvelles versions de R peuvent apporter des corrections, éliminer les bugs... Il est donc intéressant de faire les MAJ "majeures" de printemps : 4.2.x $\rightarrow$ 4.3.x 

:::: {.columns}

::: {.column width="50%"}
::: {.callout-caution}
## Les Breaking Changes
Certaines versions de R apportent des **breaking changes** qui peuvent casser le fonctionnement de code fonctionnant sur des versions précédentes (ex : `stringAsFactor = FALSE` au lieu de `TRUE` avant la version 4.0). 

A l'inverse, des nouvelles fonctionnalités ne vont marcher que sur des versions récentes (ex : le pipe `|>` à partir de R 4.1.0)
:::
:::

::: {.column width="50%"}
::: {.callout-tip appearance="minimal"}
### Bonne pratique
Dans les publications, pensez à intégrer la version de R utilisée dans vos analyses, ainsi que les packages (fonctions) utilisés
```r
# Pour citer R
citation()

# Pour citer un package (ici ggplot2)
citation("ggplot2")
```
:::
:::
::::

## Rappels sur le fonctionnement des packages

1) On **installe** le package

```r
install.packages("remotes")
```
Cela place les fonctions du package sur votre PC.

::: {.callout-tip appearance="minimal" icon=false}
Analogie : on **achète** un livre :notebook: pour le mettre dans sa bibliothèque :books:
:::

::: {.fragment}

2)  On **charge** le package

```r
library(remotes)
```
On évite au lancement de R de lancer *tous* les packages installés, il faut donc indiquer lors de chaque session les packages à charger

::: {.callout-tip appearance="minimal" icon=false}
Analogie : on **sort** le livre de la bibliothèque et on l'ouvre pour utiliser son contenu :book:
:::
:::

## Alternative au `library`, le préfixage

<br>

La notation

```r
dplyr::filter(iris, Species == "setosa")
```

Peut remplacer le code

```r
library(dplyr)
filter(iris, Species == "setosa")
```

:::{.fragment}

::: {.callout-tip}
## Trois avantages
* Eviter les conflits si 2 packages ont une fonction au même nom (ex : `filter()` existe également dans le package `{stats}`)
* Identifier quelle fonction provient de quel package
* Ne pas charger tout un package pour une seule fonction
:::
:::

## Quelques mises en garde

* Les fonctions provenant de packages tels que ceux  du `tidyverse` proposent énormément de fonctionnalités pratiques, utiles, fonctionnelles par rapport aux fonctionnalités *classiques* de R
* **MAIS** elles ont un cycle de développement très dynamique pouvant mener à des fonctions rapidement `deprecated` ou `superseded`

![](img/lifecycle.png){fig-align="center" width="50%"}

::: {.fragment}
::: {.callout-tip appearance="minimal"}
### Bonne pratique
* Privilégier, lorsque c'est possible, les fonctions/packages les plus **stables** possible
:::
:::

#  3. Structurer ses scripts {.inverse}

## Penser reproductibilité
 
**Un principe :** on code pour les autres, en organisant son travail et en automatisant le plus possible


::: {.callout-tip appearance="minimal"}
### Bonnes pratiques
* Noms des fichiers & variables explicites, suivant les conventions de nommage (cf. précédemment)
* Distinguer variables d'origine et variables créées en adoptant une règle de convention (par ex. utiliser `recod` en préfixe ou suffixe du nom des variables)
* Utilisation des chemins relatifs dans les programmes pour exécuter sans problème le code sur un autre ordinateur
* Coder de façon compréhensible avec des commentaires (aucune documentation supplémentaire ne devrait être fournie).
L'ajout des commentaires se fait en ajoutant `#` en début de ligne (raccourci clavier `CRTL + MAJ + C`)
* Identification de l'ordre d’exécution des programmes pour ré-exécution facilitée de tous les programmes
:::

::: {.callout-note}
## A noter
Ces grands principes ne sont pas exclusifs à R, ils sont valables quel que soit le langage de programmation
:::

## Respecter des règles pour faciliter la lecture (1/2)

- L'opérateur d'affectation est  `<-`

- Retour à la ligne régulièrement (**la longueur maximale recommandée d'une ligne est 80 caractères**) et après chaque pipe (`%>%` ou `|>`) 

- L'indentation se fait grâce à la touche `TAB`. Le raccourci `Ctrl+I` sert à réindenter les lignes de code sélectionnées

- Les opérateurs qui lient les objets entre eux `(=, +, -, <-, etc.)` sont entourés d'espaces

- Les opérateurs qui modifient un objet ou sélectionnent une partie d'un objet `(:, !!, $, @, [, ], [[, ]])` ne sont pas entourés d'espaces

```r
# On écrit 
1 + 1 = 2
dataframe$variable

# et non 
1+1=2
dataframe $ variable
```

## Respecter des règles pour faciliter la lecture (2/2)
- On insère un espace après la virgule mais pas avant, comme en français !

- On ne met pas d'espace avant ou après les parenthèses

- En revanche, les opérateurs de comparaison doivent être entourés d'espace pour ne pas être mal interprétés par R

```r
# On écrit
mean(x, na.rm = TRUE  
1 < -10

# et non 
mean ( x , na.rm = TRUE )
1<-10
```

::: {.callout-note}
## A noter
RStudio signale les erreurs dans la marge des scripts
![](img/script.png)
:::


## Structurer son code

::: {.callout-tip appearance="minimal"}
### Bonnes pratiques

- Commencer l’écriture du script par les métadonnées (titre auteur, date, version de R, encodage, etc.)
- Ajouter la liste des packages utilisés et leur version
```r
# "à la main" lorsqu'on charge les packages
library(tidyverse)    # v1.3.2
library(dplyr)        # v1.1.0

# automatique
packages_utilises <- sessionInfo()
```
- Structurer en parties, sous-parties, grâce au raccourci `CTRL + MAJ + R ` ou à l'addin `strcode`
```r
#  Titre 1 -------------------------------------
## Titre 2 -------------------------------------

# ou bien 

#   ____________________________________________________________________________
#   Titre 1                                                                 ####

##  ............................................................................
##  Titre 2                                                                 ####
```
:::

## Si on n'est pas à l'aise avec l'écriture de codes...

Il existe des alternatives 'clic-bouton' :

- le package/addin [{esquisse}](https://dreamrs.github.io/esquisse/){target="_blank"} pour créer des graphiques en ggplot
![](img/logo_esquisse.png){fig-align="center" width="20%"}
- le package [{Factoshiny}](http://factominer.free.fr/graphs/factoshiny-fr.html){target="_blank"} pour améliorer facilement et de façon interactive les graphiques issus d'analyses factorielles (ACP, ACM, AFM, etc.) pour les rendre beaucoup plus lisibles

- [{R Commander}](https://www.john-fox.ca/RCommander/index.html){target="_blank"}, une interface utilisateur graphique (GUI)

::: {.callout-tip appearance="minimal"}
### Bonne pratique

Penser à récupérer les lignes de codes générées par ces utilitaires et à les stocker dans des scripts !
:::

# 4. Nommer ses données {.inverse}

## Utiliser des conventions de nommage
- **`allowercase`** : tout en minuscule, sans séparateur  
- **`period.separated`** : tout en minuscule, mots séparés par des points  
- **`underscore_separated`** : tout en minuscule, mots séparés par un *underscore* (`_`)  
- **`lowerCamelCase`** : première lettre des mots en majuscule, à l'exception du premier mot ; et si nom simple, tout en minuscule  
- **`UpperCamelCase`** : première lettre des mots en majuscule, y compris le premier et même lorsque le nom est composé d'un seul mot

::: {.callout-tip appearance="minimal"}
### Bonne pratique
Possibilité de mixer les conventions mais garder une cohérence afin de faciliter la compréhension des fichiers et du code
:::

::: {.callout-caution}
**R est sensible à la casse** ce qui signifie que `variable` et `Variable` sont deux objets différents. 
:::

## Nommer les fichiers et les objets

- **Pour les fichiers**, on peut les nommer avec la structure `numero_nom_millesime.extension`, sans symboles spéciaux dans le nom  
*Rappel des symboles spéciaux : `-.,;:\/$`^`, caractères accentués, etc.*

*Exemple : `01_import_donnees_20230606.R`*  

- **Pour les variables**, il est recommandé d'utiliser un **nom**

*Exemple : `temperature_max`*

- **Pour les fonctions**, il est recommandé d'utiliser un **verbe**

*Exemple : `create.map` serait une fonction qui permettrait de créer une carte*

---

::: {.callout-tip appearance="minimal"}
## Bonne pratique
Pour les variables, comme pour les fonctions :  

* ne pas utiliser `T` ou `F` pour nommer des variables (ce sont les abréviations de `TRUE` et `FALSE`)
* ne pas utiliser de noms qui sont déjà des fonctions de R
:::


**Une aide pour écrire les scripts de façon _cohérente_**  {{< fa globe >}} [Tidyverse Style Guide](https://style.tidyverse.org/index.html){target="_blank"}  


# 5. Importer ses données {.inverse}

## Importer divers types de données

**Quels types de données peuvent être importés ?** 

- Données dans les formats "plats" ou formats délimités (.csv, .txt)
- Données issues d'Excel ou d'autres logiciels de statistique (Stata, SPSS, etc.)
- Données stockées dans des bases de données relationnelles  

::: {.callout-tip appearance="minimal"}
### Bonne pratique
**Bien étudier son jeu de données à importer, en se posant les questions suivantes :**

1. La première ligne contient-elle le nom des variables ?  
2. Quel est le séparateur des colonnes ? (`. , ; \t`)  
3. Quel est le caractère utilisé pour indiquer les décimales ? Le point (à l'anglo-saxonne) ou la virgule (à la française) ?  
4. Les valeurs textuelles sont-elles encadrées par des guillemets ? Si oui, s'agit-il de guillemets simples (`’`) ou de guillemets doubles (`"`) ?  
5. Y a-t-il des valeurs manquantes ? Si oui comment sont-elles indiquées ? 
:::

## Comment importer les différents fichiers ?

| Type     | Base R                 | Tidyverse                                   | Séparateur de colonnes | Séparateur décimal |
|:---------|:-----------------------|:--------------------------------------------|:-----------------------|:-------------------|
| Délimité | `read.csv()`           | `readr::read_csv()`                         | `,`                    | `.`                |
|          | `read.csv2()`          | `readr::read_csv2()`                        | `;`                    | `,`                |
|          | `read.table()`         | `readr::read_table()`                       |                        | `.`                |
|          | `read.delim()`         | `readr::read_delim()`                       | `\t`                   | `.`                |
|          | `read.delim2()`        | `readr::read_delim2()`                      | `\t`                   | `,`                |
| Excel    | `xlsx::read.xlsx()`    | `readxl::read_excel()`                      |                        |                    |
| SPSS     | `foreign::read.spss()` | `haven::read_spss()` ou `haven::read_sav()` |                        |                    |
| Stata    | `foreign::read.dta()`  | `haven::read_stata()`                       |                        |                    |
| SAS      | `foreign::read.ssd()`  | `haven::read_sas()`                         |                        |                    |
| dBase    | `foreign::read.dbf()`  | \-                                          |                        |                    |

---

**Exemple pour un fichier .csv**
```{r}
#| eval: false
#| include: true
#| message: false
#| echo: true
#| results: hide
#| code-copy: true
# En langage R de base
read.csv(file, header = TRUE, sep = ",", dec = ".")
```

```{r}
#| eval: false
#| include: true
#| message: false
#| echo: true
#| results: hide
#| code-copy: true
# En "tidyverse"
readr::read_csv(file, col_names = TRUE)
```

## Le concept de données `tidy`

:::: {.columns}

::: {.column width="50%"}

**Jeu de données "rangé"** :

- chaque variable est dans une colonne
- chaque observation est dans une ligne
- chaque valeur est dans une cellule
:::

::: {.column width="50%"}
![](img/screenshot_TidyData.png)

Source : Wickham & Grolemund (2017)
[R for Data Sciences: Visualize, Model, Transform, Tidy and Import Data](https://r4ds.had.co.nz){target="_blank"}
:::

::::

::: {.callout-caution}
On a des fichiers de données qui ne respectent pas toujours ces règles :

- en-têtes de colonnes ne sont pas des noms mais des valeurs
- plusieurs variables stockées dans une colonne
- variables stockées dans les lignes et les colonnes
- plusieurs types d'observations stockés dans le même tableau, etc.
:::


## "Ranger" ses données

**Solution pour ranger ses données = les verbes de `tidyr` :**

- `pivot_longer()` : transformer des colonnes en lignes
- `pivot_wider()` : transformer des lignes en colonnes
- `separate()` : séparer une colonne en plusieurs colonnes
- `separate_rows()` : séparer une colonne en plusieurs lignes
- `unite()` : regrouper plusieurs colonnes en une seule
- `extract()` : créer de nouvelles colonnes à partir d'une colonne de texte
- `complete()` : compléter des combinaisons de variables manquantes

## Besoin d'examiner rapidement vos données dans Excel ? 

Utilisez l'addin `viewxl` pour exporter interactivement des *data frame* de l'environnement global vers Excel

:::: {.columns}

::: {.column width="50%"}

- avec la fonction `view_in_xl`  
![](img/viewxl.png)
:::

::: {.column width="50%"}
- dans la console :

```r
viewxl::view_in_xl(diamonds)
```
![](img/excel_danger.jpeg)
:::

::::


#  6. Exporter ses résultats {.inverse}

## Exporter les graphiques

- **Directement via l'onglet 'Plots'** 
Cliquer sur 'Export' qui donne accès à trois options différentes :

  - save as image
  - save as PDF
  - copy to clipboard

- **Dans un script**, avec les fonctions `jpeg()`, `png()`, `bmp()` ou `tiff()` ou  `pdf()` du package [{grDevices}](https://uribo.github.io/rpkg_showcase/graphics/grDevices.html){target="_blank"}

```r
png(filename = "fichier.png")
ggplot(...)
dev.off()
```

- **On préfèrera utiliser la fonction `ggsave` du package [{ggplot2}](https://ggplot2.tidyverse.org/)**![](img/logo_ggplot2.png){fig-align="center" width="8%"}
```r
ggplot(...) +
  ...
ggsave(filename = name.extension)
```

## Exporter les tableaux

Comme on importe divers formats de données, on peut exporter les données depuis R vers divers formats

| Type de fichier | Base R                                     | Tidyverse                          |
|:----------------|:-------------------------------------------|:-----------------------------------|
| .txt            | `write.table()`                            | `readr::write_delim(delim = "\t")` |
| .csv            | `write.csv()`                              | `readr::write_csv()`               |
| .xlsx           | `openxlsx2::write_xlsx()` OU `writexl::write_xlsx()` | \-                       |
| .dbf            | `foreign::write.dbf()`                     | \-                                 |
| .sav (SPSS)     | `foreign::write.foreign(package = "SPSS")` | `haven::write_sav()`               |
| .dta (Stata)    | `foreign::write.dta()`                     | `haven::write_dta()`               |


# COMMENT ORGANISER SON TRAVAIL ? {.inverse}

# 7. Travailler en projets {.inverse}

## Créer un projet sous RStudio {background-image="img/rstudio-logo.png" background-size="100px" background-position="top 40px right 80px"} 
À partir de l'icône dédiée en haut à droite de RStudio

![](./img/screenshot_RStudio_01NewProject.png){fig-align="center" width="70%"} 


## Créer un projet sous RStudio {background-image="img/rstudio-logo.png" background-size="100px" background-position="top 40px right 80px"}

Sélectionner l'option "*New project*", puis l'option "*New Directory*" et enfin "*Empty Project*"  

![](./img/screenshot_RStudio_02CreateProject.png){width="32%"} ![](./img/screenshot_RStudio_03ProjectType.png){width="32%"} ![](./img/screenshot_RStudio_04ProjectDirectory.png){width="32%"}

## Exemples d'arborescence

**Exemples de structurations**  
(chacun s'organisera de la façon qu'il juge la plus adaptée à ses usages)  

:::: {.columns}

::: {.column width="50%"}
![](./img/filestructure.png){width="75%"}
:::

::: {.column width="50%"}
::: {.callout-note}
## A noter
Le plus important, ce sont les **données initiales** et les **scripts de traitements**.
:::
:::

::::





##  Coup de pouce : Le package [{InraeThemes}](https://davidcarayon.github.io/InraeThemes/) {background-image="img/logo_hex.png" background-size="100px" background-position="top 40px right 80px"}

<br>
<br>

```r
# install.packages("remotes")
remotes::install_github("davidcarayon/InraeThemes")
InraeThemes::new_analysis()
```

<br>


:::: {.columns}

::: {.column width="50%"}

![](img/cap_project_IT.png){fig-align="center" width="70%"}
:::

::: {.column width="50%"}
![](img/project_IT){fig-align="center" width="40%"}
:::

::::

# COMMENT ANALYSER SES DONNÉES ? {.inverse}

# 8. Outils d'exploration {.inverse}

## Fonction `summary()`

- **Utile pour avoir une vue résumée d'une variable** 
- S'applique à tout type d'objet, y compris un *data frame* entier, et s'adapte à la nature des variables contenues 

```{r, eval = TRUE, include = FALSE, echo = FALSE}
library(tidyverse)
```

```{r, eval = TRUE, include = TRUE, echo = TRUE, message = FALSE, warning = FALSE}
data(iris)
iris %>% 
  summary()
```


## Fonction `glimpse()` du package [{dplyr}](https://dplyr.tidyverse.org/){target="_blank"}

**Permet de visualiser de manière condensée le contenu d'un tableau de données**  

```{r, eval = TRUE, include = TRUE, echo = TRUE, message = FALSE, warning = FALSE}
data(iris) 
iris %>% 
  dplyr::glimpse()
```


## Fonction `describe()` du package [{questionr}](https://juba.github.io/questionr/index.html){target="_blank"}

**Décrit également les différentes variables d'un tableau de données**
```{r, eval = TRUE, include = TRUE, echo = TRUE, message = FALSE, warning = FALSE}
data(iris) 
iris %>% 
  questionr::describe()
```

## Fonction `tbl_summary()` du package [{gtsummary}](https://www.danieldsjoberg.com/gtsummary/){target="_blank"}

**Permet la production de tableaux croisés et autre tables complexes prêtes pour publication. S'appuie sur Great Tables ([{gt}](https://gt.rstudio.com))**

```{r, eval = TRUE, include = TRUE, echo = TRUE, message = FALSE, warning = FALSE}
data(iris) 
iris %>% 
  gtsummary::tbl_summary()
```

## Fonction `dfSummary()` du package [{summarytools}](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html){target="_blank"}

**Présentation des résultats dans un tableau, pour variables QN & QL**
```{r, eval = TRUE, include = TRUE, echo = TRUE, message = FALSE, warning = FALSE}
data(iris) 
iris %>%  
  summarytools::dfSummary(graph.col = FALSE)
```


## Explorer les données manquantes avec la fonction `vis_miss()` du package [{visdat}](https://cran.r-project.org/web/packages/visdat/readme/README.html){target="_blank"}

<br>
<br>

```r
library(visdat)
vis_miss(airquality)
```

![](img/vismiss.png){fig-align="center" width="40%"}

## L'exploration en un bouton avec [{DataExplorer}](https://cran.r-project.org/web/packages/DataExplorer/vignettes/dataexplorer-intro.html){target="_blank"} {background-image="img/dataexplorer.png" background-size="100px" background-position="top 40px right 80px"} 

-  `plot_histogram()`, `plot_bar()`, `plot_density()` proposent des graphiques en sélectionnant les variables pertinentes à chaque cas

- Rapport automatique, au format HTML avec `create_report()` : Visualisations graphiques (distributions, analyses de corrélations, ACP), état des lieux du jeu de données, concernant notamment le type des variables ou les données manquantes  

::: {.callout-tip}
## Bonus
[{FactoInvestigate}](http://factominer.free.fr/reporting/index_fr.html) pour quelque chose de similaire mais spécifique à des sorties d'analyses multivariées !
:::

::: {.callout-note}
## A noter
Fonctions utiles pour première exploration des données, sans autre programmation nécessaire.  

**Pour aller plus loin...** programmation lettrée (Rmarkdown/Quarto) [session dédiée si nécessaire]
:::

#  9. Quelques packages conseils {.inverse}

## [{questionr}](https://juba.github.io/questionr/index.html){target="_blank"} : particulièrement dédié au traitement de données d'enquêtes (variables qualitatives)

<br>

```{r, echo = TRUE}
library(questionr)
data(hdv2003)
freq(hdv2003$qualif, cum = TRUE, total = TRUE, sort = "dec")
```

## [{skimr}](https://docs.ropensci.org/skimr/){target="_blank"} : un summary sous stéroïdes :muscle: {background-image="img/logo_skimr.png" background-size="100px" background-position="top 40px right 80px"} 

:::: {.columns}

::: {.column width="40%"}
```r
library(skimr)
skimr::skim(mtcars)
```
:::

::: {.column width="60%"}
:::

::::


![](img/skimr.png)


## [{tidymodels}](https://www.tidymodels.org){target="_blank"} : le tidyverse de la modélisation {background-image="img/tidymodels.png" background-size="150px" background-position="top 40px right 80px"} 


<br>
<br>

- Propose une interface unifiée à tous les types de modèles (`lm`, `glm`, `randomForests`, `xgboost`, etc.)

![](img/tidymodels-workflow.jpg){fig-align="center" width="80%"}

## [{ggstatsplot}](https://indrajeetpatil.github.io/ggstatsplot/){target="_blank"} : combiner statistiques et représentations graphiques {background-image="img/ggstatsplots_logo.png" background-size="100px" background-position="top 40px right 80px"} 

<br>

```r
library(ggstatsplots)
```

<br>

:::: {.columns}

::: {.column width="50%"}
![](img/ggstatsplot.png){fig-align="center" width="100%"}
:::

::: {.column width="50%"}
![](img/ggscatter.png){fig-align="center" width="80%"}
:::

::::

## [{sf} & {mapsf}](https://riatelab.github.io/mapsf/){target="_blank"} : traitements spatiaux et cartographie comme un pro {background-image="img/sf.png" background-size="100px" background-position="top 40px right 80px"} 


:::: {.columns}

::: {.column width="50%"}
![](img/mapsf.png){fig-align="center" width="100%"}
:::

::: {.column width="50%"}
![](img/mf-map.png){fig-align="center" width="80%"}
:::

::::

## Analyses factorielles

**Deux grandes écoles** 

:::: {.columns}

::: {.column width="40%"}
::: {.fragment}
```r
library(ade4)
library(adegraphics)
```

![](img/ade4.png)


:::
:::

::: {.column width="60%"}
::: {.fragment}
```r
library(FactoMineR)
library(factoextra) # + FactoInvestigate + FactoShiny
```

![](img/facto.png) 

{{< fa caret-right >}} :trophy: en général privilégié

:::
:::

::::


## [{PCAmixdata}](https://cran.r-project.org/web/packages/PCAmixdata/vignettes/PCAmixdata.html){target="_blank"} : l'analyse de données mixtes

> Chavent, M., Kuentz-Simonet, V., Labenne, A., & Saracco, J. (2014). Multivariate analysis of mixed data: The R package PCAmixdata. arXiv preprint arXiv:1411.4911.

![](img/pcamix.png){fig-align="center" width="40%"}

## Police et ligature : Fira Code

Police à installer [ici](https://fonts.google.com/specimen/Fira+Code)

![](img/ligatures.png)

# ALLER PLUS LOIN... ET SORTIR DE R & RStudio {.inverse}

# 10. Des outils pour valoriser, communiquer ses travaux {.inverse} 

## Markdown {background-image="img/markdown.png" background-size="200px" background-position="top 40px right 80px"}

<br>

![](img/markdown-ex.png){fig-align="center" width="100%"}

## Quarto

- Quarto est le *successeur* de Rmarkdown qui se veut plus généraliste et polyglotte
- :warning: Rmarkdown n'est pas mort pour autant ! 

:::: {.columns}

::: {.column width="50%"}
![Rmarkdown : centré sur R](img/r-knitr-rmd.jpeg)
:::

::: {.column width="50%"}
![Quarto : Approche plus généraliste](img/quarto_tech.png)
:::

::::

## Une [extension INRAE](https://riatelab.github.io/mapsf/){target="_blank"} ! {background-image="img/logo-4.png" background-size="200px" background-position="top 40px right 80px"} 

<br>
<br>

:::: {.columns}

::: {.column width="50%"}
![](img/docs.jpg)
:::

::: {.column width="50%"}
![](img/website.png)
:::

::::

Plus d'informations sur {{< fa globe >}} [Github](https://github.com/davidcarayon/quarto-inrae-extension){target="_blank"}

## Renv : Figer ses versions de packages R {background-image="img/renv_logo.svg" background-size="200px" background-position="top 40px right 80px"} 

<br>

:::: {.columns}

::: {.column width="50%"}
**Sans {renv}**

![](img/shared-library.svg)

Les packages sont communs pour tous les projets

:::

::: {.column width="50%"}
**Avec {renv}**

![](img/renv.png)

Le projet 1 peut utiliser dplyr 1.0.2 et le projet 2 dplyr 0.8.2
:::

::::

## Git & Gitlab/Hub {background-image="img/logo_git.png" background-size="200px" background-position="top 40px right 80px"} 

:::: {.columns}

::: {.column width="50%"}
![](img/finaldoc.png){fig-align="center" width="90%"}
:::

::: {.column width="50%"}
![](img/gitworkflow.png){fig-align="center" width="90%"}

**Pourquoi utiliser Git ?**

* Garder en mémoire chaque modification de chaque fichier, pourquoi elle a eu lieu, quand et par qui

* Faciliter le développement collaboratif : fusion des différentes modifications

* Revenir aux versions précédentes (+ sauvegarde du travail)

* Déployer son travail en ligne (Pages)

:::

::::


## Shiny : Des application web {background-image="img/shinylogo.png" background-size="100px" background-position="top 40px right 80px"}

::: columns
::: {.column width="40%"}
![](img/shiny.png){fig-align="center" width="80%"}

- Shiny est un package R qui permet de développer facilement des applications web interactives dans une syntaxe R très simple (pouvant être complétée par du HTML / CSS / JS pour les applications les plus abouties).

- Outil principalement utilisé pour l'analyse et la visualisation de données, ou encore la mise à disposition de code R "complexe" en presse-bouton

- Excellent outil de valorisation et diffusion des résultats de recherche

:::

::: {.column width="60%"}

<br>

![](img/feature.png)
:::
:::




# POUR CONCLURE {.inverse}

## Ne soyons pas trop exigeants...

:::: {.columns}

::: {.column width="40%"}
![](img/usingr.jpeg){width="100%" fig-align="center"}

[reddit.com/r/rstatsmemes/](https://www.reddit.com/r/rstatsmemes/){target="_blank"}

:::

::: {.column width="60%"}
![](img/mess.png){width="100%" fig-align="center"}
![](img/packages_mess.jpeg){width="60%" fig-align="center"}
:::

::::

## Merci ! Des questions ?

::: {.callout-note appearance="minimal"}

###### Les liens
{{< fa brands github >}}   [https://github.com/statire/bulledr](https://github.com/statire/bulledr){target="_blank"}

{{< fa brands github >}}   [https://github.com/davidcarayon/InraeThemes](https://github.com/davidcarayon/InraeThemes){target="_blank"}

{{< fa brands github >}}   [https://github.com/davidcarayon/quarto-inrae-extension](https://github.com/davidcarayon/quarto-inrae-extension){target="_blank"}

:::


::: {.callout-note appearance="minimal"}

###### Ressources

{{< fa sheet-plastic >}}  [Cheatsheet Bonnes Pratiques en R à ETTIS](https://github.com/statire/bulledr/blob/main/CheatSheet_bulledr_ETTIS.pdf) (PDF)

{{< fa globe >}}   [https://www.productive-r-workflow.com](https://www.productive-r-workflow.com){target="_blank"}

{{< fa book >}}   [R for Data Science (2e)](https://r4ds.hadley.nz){target="_blank"}

:::

{{< fa brands slideshare >}} Slides consultables ici : <br> [https://statire.github.io/bulledr/01-bonnes_pratiques/](https://statire.github.io/bulledr/01-bonnes_pratiques/){target="_blank"}


## Slides made with ...{.plain}

<center>

![](img/logo-4.png){width=400px fig-align="center"}

{{< fa brands github >}}   [https://github.com/davidcarayon/quarto-inrae-extension](https://github.com/davidcarayon/quarto-inrae-extension){target="_blank"}

</center>
