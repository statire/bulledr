---
title: "Bulle d'R : Visualisations graphiques avec R"
date: "2025-01-08"
date-format: long
lang: fr  
author:
  - name: Sandrine LYSER
    orcid: 0000-0001-6820-0672
    email: sandrine.lyser@inrae.fr
  - name: David CARAYON
    email: david.carayon@inrae.fr
    orcid: 0000-0003-0217-2175
format: 
  inrae-revealjs:
    footer: "Bulle d'R | Visualisations graphiques"
    transition: none
    slide-level: 4 # niveau de titre maxi des diapos
    width: 1250
    mainfont: "Raleway"
    sansfont: "Avenir Next LT Pro"
    logo: img/bloc-etat.png
    include-after-body: revealjs-clean-title-slide.html
    title-slide-attributes:
        data-footer: "<a rel='license' href='https://creativecommons.org/licenses/by-sa/4.0/'><img alt='Creative Commons License' style='border-width:0; width:200px' src='https://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png' /><br></a>Présentation diffusée sous <a rel='license' href='https://creativecommons.org/licenses/by-sa/4.0/'>licence CC BY-SA 4.0</a>."
    theme: style_revealjs.scss
    fig-cap-location: top
highlight-style: atom-one
lightbox: true # pour avoir les images cliquables
bibliography: references.bib
revealjs-plugins:
  - pointer
from: markdown+emoji
editor_options: 
  chunk_output_type: console
execute: 
  cache: true
# Dernière mise à jour le : 08 janvier 2025
---

```{r, eval = TRUE, include = FALSE, echo = FALSE}
#| label: initR
#| eval: true
#| include: false
#| echo: false
library(tidyverse)
```

# INTRODUCTION {.inverse}

## Représentations graphiques
- Différentes formes de représentations graphiques en fonction

  + des principales variables utilisées (continues, discrètes/qualitatives, un mix des deux)
  + et de leur nombre (une, deux ou plusieurs)

- Un site pour aider à trouver la représentation la plus appropriée aux données

```{=html}
<p align="center"><iframe scrolling= "yes" width = "800" height = "400" allowfullscreen="TRUE" src="https://www.data-to-viz.com/"></iframe></p>
<p align="right"><small>Site : <a href=https://www.data-to-viz.com/>from Data to Viz</a></small></p>
```
## Quelques rappels pour la réalisation des graphiques
- "Le moins est le mieux" $\Rightarrow$ épurer le graphique et retirer la 3D pour le rendre plus compréhensible
- Les objets proches sont perçus comme appartenant à un même groupe $\Rightarrow$ positionner côte à côte les éléments que l'on souhaite voir analysés ensemble, comparés l'un à l'autre
- Certains éléments peuvent être omis sans réduire la compréhension (axe des abscisses selon les cas)
- Pour alléger les visualisations, ne pas "fermer" les graphiques avec un cadre
- Dans un diagramme en barre, l'axe des ordonnées commence à 0

## Plusieurs systèmes graphiques sous R  
- Un système de base, avec le package `{graphics}`
- Un système plus complet, le système _grid_, sur lequel se basent les packages

  + [`{lattice}`](https://lattice.r-forge.r-project.org/){target="_blank"} qui fournit des visualisations de données, puissantes et élégantes, inspirées des graphiques _treillis_
  + [`{ggplot2}`](https://ggplot2.tidyverse.org/){target="_blank"} qui définit des graphiques en utilisant une grammaire particulière (_grammar of graphics_)

# VISUALISATION GRAPHIQUE R STANDARD {.inverse}

## Création d'un graphique
**En 3 étapes, à l'aide des packages `{graphics}` et `{grDevice}`**

- Étape 1. Configuration des paramètres graphiques (optionnel)  
- Étape 2. Initialisation du graphique  
- Étape 3. Ajout d'éléments au graphique initialisé à l'étape 2

### 1. Configuration des paramètres graphiques {.smaller}
- avec `par()` : pour définir ou interroger les paramètres de la fenêtre graphique (marges, couleurs, découpage de la fenêtre, etc.)
- avec `layout()` : pour personnaliser la disposition des graphiques  

:::: {.columns}
::: {.column width="50%"}
- Fonction `par()`

<div class=tiny-code>

```{r}
#| label: par
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 5
#| fig-align: center
# Exemple pour 4 graphiques dans une fenêtre
par(mfrow = c(2, 2),         # Fenêtre découpée en 2 lignes et 2 colonnes
    bg = "azure4",           # Couleur de fond
    col = "white",           # Couleur du graphique
    mar = c(b = 2.5, l = 5,  # Marges : bottom, left
            t = 3, r = 1))   # top, right
plot(iris$Sepal.Length, main = "plot 1")
plot(iris$Petal.Length, main = "plot 2")
plot(iris$Sepal.Width, main = "plot 3")
plot(iris$Petal.Width, main = "plot 4")
```

</div>

:::
::: {.column width="50%"}
- Fonction `layout()`

<div class=tiny-code>

```{r}
#| label: layout
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 5
#| fig-align: center
# Découpage de la fenêtre graphique
layout(matrix(nrow = 4,           # Fenêtre découpée en 4 lignes
              ncol = 3,           # et 3 colonnes
              data = c(1, 1, 2,   # places occupées par chaque graphique
                       1, 1, 2, 
                       3, 4, 4,   # par ex., plot 3 sur col. 1 et ligne 3
                       3, 4, 4),  # et sur col. 1 et ligne 4
              byrow = TRUE))      # matrice remplie par ligne
plot(iris$Sepal.Length, main = "plot 1")
plot(iris$Petal.Length, main = "plot 2")
plot(iris$Sepal.Width, main = "plot 3")
plot(iris$Petal.Width, main = "plot 4")
```

</div>

:::
::::

### 2. Initialisation du graphique
- Avec la fonction de base `plot(x = VarX, y = VarY)` ou sous forme de formule ` plot(varY ~ varX)`
- Avec les fonctions pour un type spécifique  
  
  - `hist()` : histogramme des fréquences d'une variable numérique
  - `boxplot()` : boîte à moustaches pour la distribution d'une variable continue
  - `barplot()` : diagramme en barres pour la fréquence des valeurs d'une variable catégorielle
  - `pie()` : diagramme circulaire/graphique en secteurs/camembert pour la fréquence des valeurs d'une variable catégorielle **non ordonnée**

#### Fonction `plot()`
:::: {.columns}
::: {.column width="50%"}
_1 variable QN_ - **Nuage de points ordonnés**
```{r, echo=-1}
#| label: plot1QN
#| eval: true
#| include: true
#| message: false
#| fig-height: 2.5
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 0.5, r = 0))
plot(iris$Sepal.Length)
```

_2 variables QN_ - **Nuage de points**
```{r, echo=-1}
#| label: plot2QN
#| eval: true
#| include: true
#| message: false
#| fig-height: 3
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 0.5, r = 0))
plot(x = iris$Sepal.Length, 
     y = iris$Petal.Length)
```

:::
::: {.column width="50%"} 
_1 variable QL_ - **Diagramme en barres**

```{r, echo=-1}
#| label: plot1QL
#| eval: true
#| include: true
#| message: false
#| fig-height: 2.5
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 0.5, r = 0))
plot(iris$Species)
```

_1 variable QN & 1 variable QL_ - **Boxplot**

```{r, echo=-1}
#| label: plotQNQL
#| eval: true
#| include: true
#| message: false
#| fig-height: 3
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 0.5, r = 0))
plot(x = iris$Species, 
     y = iris$Sepal.Length)
```

:::
::::

#### Fonctions spécifiques
:::: {.columns}
::: {.column width="45%"}
**Histogramme de distribution**
```{r, echo=-1}
#| label: hist
#| eval: true
#| include: true
#| message: false
#| fig-height: 3
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 1, r = 0))
hist(iris$Sepal.Length)
```

**Camembert**
```{r, echo=-1}
#| label: pie
#| eval: true
#| include: true
#| message: false
#| fig-height: 4
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 0, r = 0))
pie(table(iris$Species))
```

:::
::: {.column width="55%"} 
**Boxplot**
```{r, echo=-1}
#| label: boxplot
#| eval: true
#| include: true
#| message: false
#| fig-height: 3
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 1, r = 0))
boxplot(Sepal.Length ~ Species, data = iris)
```

**Diagramme en barres**
```{r, echo=-1}
#| label: barplot
#| eval: true
#| include: true
#| message: false
#| fig-height: 2
#| fig-align: center
par(mar = c(b = 0.5, l = 4, t = 1, r = 0))
barplot(table(iris$Species))
```
:::
::::

### 3. Ajout d'éléments au graphique initialisé à l'étape précédente

- `points()` : des points  
- `lines()` : des points reliés par une ligne  
- `abline()` : une ligne droite horizontale qui traverse la zone graphique 
- `legend()`: une légende  
- `axis()`: un axe  
- `text()`: du texte dans la zone graphique  
- `mtext()`: du texte dans les marges de la figure ou de la fenêtre graphique  
- `title()`: du texte dans le titre, le sous-titre, les légendes des axes  
- etc.

## Exemple de mise en forme d'un graphique {#sec-graph .scrollable}  
Voici un exemple de graphique personnalisé, représentant deux variables quantitatives et une qualitative, avec explication succinte des différentes fonctions utilisées et de leurs paramètres (non exhaustifs)

<div class=small-code>

```{r}
#| label: exGraph
#| eval: true
#| include: true
#| message: false
#| echo: true
#| output-location: slide
#| fig-height: 6
#| fig-align: center
# Paramétrage des marges (c(bas, gauche, haut, droite))
# par défaut par(mar = c(5, 4, 4, 2) + 0.1)
par(mar = c(8, 4, 4, 2) + 0.1)  # valeurs en lignes de la marge
# Choix de la palette couleurs
palette(hcl.colors(3, "viridis"))
# --- GRAPHIQUE
# Représentation des données
plot(x = iris$Sepal.Length, 
     y = iris$Petal.Length,
     col = iris$Species,          # symboles colorés selon les modalités de la variable Species
     # col = "#490092",           # OU couleur unique des symboles
     type = "p",                  # "p" (points), "l" (lignes), "b" ou "o" (les 2)
     pch = 1,                     # type de symboles (valeur entre 0 et 25)
     cex = 1,                     # taille des symboles
     lwd = 2,                     # épaisseur de la bordure des symboles (valeur entre 1 et 9)
     xlim = c(0, 10),             # limites de l'axe des x
     ylim = c(0, 10),             # limites de l'axe des y
     xlab = "axe des abscisses",  # titre pour l'axe des x
     ylab = "axe des ordonnées")  # titre pour l'axe des y
# Ajout de TITRE
title(main = "Titre du graphique",
      cex.main = 1.2,               # taille de la police
      font.main = 2,                # 1=plain, 2=bold, 3=italic, 4=bold it., 5=symbol
      col.main = "#004949")         # couleur
# Ajout de LÉGENDE
legend(x = 0,                           # emplacement de la légende (coordonnée x)
       y = 10,                          # emplacement de la légende (coordonnée y)
       title = "Iris",                  # titre de la légende
       legend = levels(iris$Species),   # valeurs de la légende
       col = hcl.colors(3, "viridis"),  # couleur des symboles de la légende
       cex = 0.8,                       # taille de la légende
       pch = 1)                         # symbole de la légende
# Ajout de LIGNE
abline(v = max(iris$Sepal.Length),  # coupe l'axe des x à cette valeur
       h = max(iris$Petal.Length),  # coupe l'axe des y à cette valeur 
       lty = 2,                     # type de ligne
       lwd = 0.5,                   # épaisseur de ligne
       col = "grey50")              # couleur de ligne
# Ajout de POINT
points(x = mean(iris$Sepal.Length),  # coordonnée x du point
       y = mean(iris$Petal.Length),  # coordonnée y du point
       col = "#FF6DB6",              # couleur du symbole
       pch = 15,                     # type de symbole
       cex = 1.5)                    # taille du symbole
# Ajout de TEXTE
text("valeur moyenne",                    # texte à afficher
     x = mean(iris$Sepal.Length) + 1,     # emplacement horizontal du texte (centre)
     y = mean(iris$Petal.Length) - 0.25,  # emplacement vertical du texte (centre) 
     col = "#FF6DB6",                     # couleur du texte
     font = 3)                            # style du texte
# Ajout de SOURCE
mtext(text = "Source : data(iris)",  # texte à afficher
      side = 1,                      # emplacement : 1=bottom, 2=left, 3=top, 4=right
      line = 5,                      # positionnement du texte
      adj = 0,                       # alignement : 0=gauche, 0.5=centré, 1=droite
      cex = 0.9,                     # taille de police
      col = "slategrey")             # couleur de police
```

</div>

## Éléments de personnalisation des graphiques  
:::: {.columns}
::: {.column width="33%"}
![Les épaisseurs de lignes](img/linewidths.png){width="55%" fig-alt="Épaisseurs de lignes." } 

![Les types de lignes](img/linetypes.png){width="70%" fig-alt="Types de lignes."}  
:::
::: {.column width="33%"}
![Les symboles de points](img/pchsymbols.png){width="65%" fig-alt="Symboles de points."}  

![Les couleurs (package [`{RColorBrewer}`](https://cran.r-project.org/web/packages/RColorBrewer/RColorBrewer.pdf){target="_blank"})](img/Rplotbrewer.png){width="75%" fig-alt="Package RColorBrewer."}  
:::
::: {.column width="33%"}
![Marges des graphiques](img/margins-mar.png){width="55%" fig-align="center" fig-alt="Marges mar."}  

![Marges extérieures](img/outer-margins.png){width="55%" fig-align="center" fig-alt="Marges outer."}  
:::
::::

---

::: {.callout-tip title="Aide pour le choix des couleurs"}
- **Packages**  
  + [`{paletteer}`](https://github.com/EmilHvitfeldt/paletteer){target="_blank"} : recense des milliers de palettes (2759) issues de packages différents (75)
  + [`{cols4all}`](https://github.com/mtennekes/cols4all){target="_blank"} : une application Shiny pour explorer les palettes, accessibles pour tous, y compris les personnes souffrant d'un déficit de vision des couleurs

```{r}
#| label: colls4all
#| eval: false
#| include: true
#| message: false
#| echo: true
cols4all::c4a_gui()
```

- **Sites**  
  `r fontawesome::fa("globe", fill = "#A626A4")` informations sur une couleur : <https://chir.ag/projects/name-that-color/>{target="_blank"}  
  `r fontawesome::fa("globe", fill = "#A626A4")` un générateur de palettes de couleurs : <https://coolors.co/>{target="_blank"}  
  `r fontawesome::fa("globe", fill = "#A626A4")` palettes de couleurs prédéfinies : <https://flatuicolors.com/>{target="_blank"}  
  `r fontawesome::fa("globe", fill = "#A626A4")` palettes de couleurs pour la cartographie : <http://colorbrewer2.org>{target="_blank"} 

:::

## Sauvegarde d'un graphique
- À partir de l'onglet 'Plots' de RStudio, où s'affichent généralement les graphiques, cliquer sur le bouton 'Export' qui donne accès à trois options :  
  + save as image
  + save as PDF
  + copy to clipboard

- Directement dans le script, en utilisant les fonctions `jpeg()`, `png()`, `bmp()`, `tiff()` ou `pdf()` du package `{grDevices}` qui permettent d'enregistrer les graphiques au format 'image' ou 'pdf'

```{r}
#| label: png
#| eval: false
#| include: true
#| message: false
#| echo: true
png(filename = "fichier.png")
  plot(...)
dev.off()
```

# VISUALISATION GRAPHIQUE AVEC GGPLOT2 {.inverse}
## Le package `{ggplot2}`
::::: {.columns}
:::: {.column width="50%"}
- **Installation**

```{r}
#| label: installggplot
#| eval: false
#| include: true
#| message: false
#| echo: true
install.packages("ggplot2")
```

- **Chargement**

```{r}
#| label: libraryggplot
#| eval: false
#| include: true
#| message: false
#| echo: true
library(ggplot2)
```

- **Création d'un graphique**  
Le principe consiste à initialiser un graphique avec la commande `ggplot()` puis à ajouter des couches permettant de représenter les données et mettre en forme le graphique

```{r}
#| label: initggplot
#| eval: false
#| include: true
#| message: false
#| echo: true
ggplot(data = dataframe, 
       aes = (x, y)) + 
       ...
```

::::
:::: {.column width="50%"}
![](img/ggplot_gallery.png){fig-align="center" fig-alt="Exemples de graphiques ggplot2."}  
<center><small>Source : <https://r-charts.com/ggplot2/>{target="_blank"}</small></center>

::: {.callout-note appearance="minimal"} 
- Le système de création des graphiques est basé sur _The Grammar of Graphics_ publié initialement par @Wilkinson1999
- **L'idée est de décomposer la construction d'un graphique en plusieurs éléments, que l'on appelle _layers_ (couches, en français)**
:::
::::
:::::

### La grammaire ggplot
Une structure en 7 _layers_ superposables

![](img/ggplot_layers.png){width="27%" fig-align="center" fig-alt="Couches ggplot2."} 

<center><small>Source : [ThinkR (2016)](https://thinkr.fr/guide-survie-ggplot2-datajournalistes/){target="_blank"}</small></center>  

::: {.callout-important}
**Les trois premiers *layers* (*data*, *aesthetics* et *geometries*) sont indispensables pour créer un graphique  
Les quatre autres *layers* permettent de paramétrer plus finement le graphique**
:::

####  Couches _data_ & _aes_ {.smaller}
::::: {.columns}
:::: {.column width="50%"}
Suivent l'initialisation du graphique faite avec `ggplot()`
  
  - **data** : jeu de données (_dataframe_ ou _tibble_) 
  - **aes** (aesthetics) : variables à représenter 

```{r}
#| label: aes
#| eval: true
#| include: true
#| message: false
#| echo: true 
#| fig-height: 3
#| fig-align: center
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length)
```

_À ce stade, on visualise le canevas du graphique mais les données ne sont pas encore représentées_
::::
:::: {.column width="50%"}
- **Dans `aes()` on précise les éléments visuels du graphique**
<center>

|***Aesthetic*** | **Description**                                   |
|:---------------|:--------------------------------------------------|
| x              | variable en abscisse                              |
| y              | variable en ordonnée                              |
| colour         | couleur du contour (des points, lignes, etc.)     |
| fill           | couleur de remplissage (des points, formes, etc.) |
| size           | taille des points, épaisseur des lignes           |
| alpha          | transparence                                      |
| linetype       | motif des tirets des lignes                       |
| shape          | type de formes                                    |

</center>
<br>

```{r}
#| label: aesArguments
#| eval: false
#| include: true
#| message: false
#| echo: true 
# Points colorés selon les modalités de Species
ggplot(data = iris) +
  aes(x = Sepal.Length, y = Petal.Length, 
      colour = Species)
```

::::
:::::

#### Couche _geom_ {.smaller}
::::: {.columns}
:::: {.column width="50%"}
Détermine le type de représentation souhaité

```{r}
#| label: geom
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 3
#| fig-align: center
# Nuage de points avec geom_point
ggplot(data = iris) +
  aes(x = Sepal.Length, y = Petal.Length, 
      colour = Species) +
  geom_point()
```

*Avec `geom_`, les données sont représentées sur le graphique*
::::
:::: {.column width="50%"}
- **Principales geométries**  
<center>

| ***Geometry***     | 	**Description** 	                                 | **Aspects esthétiques**                                                                                                 |
|:-------------------|:----------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------|
| `geom_point()` 	   | Nuage de points ($\Leftrightarrow$ `plot()`)	       | **x**, **y**, colour, fill, group, shape, size, alpha                                                                   | 
|` geom_bar()` 	     | Diagramme en barres ($\Leftrightarrow$ `barplot()`) | **x**, **y**, colour, fill, group, linetype, linewidth, alpha                                                           |
| `geom_histogram()` | Histogramme ($\Leftrightarrow$ `hist()`)	           | *identiques à `geom_bar()`*                                                                                             |
| `geom_boxplot()`   | Boîte à moustaches 	                               | **x** OU **y**, **ymin** OU **xmin**, **ymax** OU **xmax**, colour, fill, group, linetype, linewidth, shape, size, alpha|
| `geom_density()` 	 | Densité 	                                           | **x**, **y**, colour, fill, group, linetype, linewidth, alpha                                                           |
| `geom_text()` 	   | Texte 	                                             | **x**, **y**, label, colour, angle, group, hjust, lineheight, size, vjust, alpha                                        |
| `geom_label()` 	   | Texte                                               | *identiques à `geom_text()`* + fill                                                                                     |

: {tbl-colwidths="[20, 40, 40]"}

</center>

_Les aspects esthétiques obligatoires sont indiqués en gras_


**Les fonctions `geom_` s'ajoutent avec l'opérateur `+` (l'ensemble des fonctions `geom_` est détaillé dans la _cheatsheet {ggplot2}_ ([version anglaise](https://rstudio.github.io/cheatsheets/data-visualization.pdf){target="_blank"} ou [version française](https://rstudio.github.io/cheatsheets/translations/french/data-visualization_fr.pdf){target="_blank"})**
::::
:::::

#### Couche _facet_ {.smaller}
Sépare la fenêtre graphique pour faire le même graphique en fonction des modalités d'une ou plusieurs variables qualitatives

:::: {.columns}
::: {.column width="33%"}
- `facet_wrap()` : graphiques disposés **les uns à côté des autres**, avec une répartition automatique dans la page

```{r}
#| label: facetwrap
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
# Plots en fonction de "Species"   
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length) +
  geom_point() +
  facet_wrap(vars(Species))
``` 

:::
::: {.column width="33%"}
- `facet_grid()` : graphiques disposés selon une grille, avec une **répartition en colonne**

```{r}
#| label: facetgridc
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
# Plots en fonction de "Species"   
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length) +
  geom_point() +
  facet_grid(cols = vars(Species))
```

:::
::: {.column width="33%"}
- `facet_grid()` : graphiques disposés selon une grille, avec une **répartition en ligne**

```{r}
#| label: facetgridl
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
# Plots en fonction de "Species"   
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length) +
  geom_point() +
  facet_grid(rows = vars(Species))
```

:::
::::

#### Couche _stat_ {.smaller}
:::::: {.columns}
::::: {.column width="55%"}
Effectue un calcul sur les données avant qu'elles ne soient affichées

:::: {.columns}
::: {.column width="50%"}
- avec une fonction `stat_()`

<div class=small-code>

```{r}
#| label: statsummary
#| eval: true
#| include: true
#| message: false
#| echo: true 
#| fig-align: center
# Moyenne de Petal.Length
# pour chaque modalité de Species
# et affichage sur les boxplots
ggplot(data = iris) +
  aes(x = Species, 
      y = Petal.Length) +
  geom_boxplot() +
  stat_summary(geom = "point", 
               fun = "mean", 
               colour = "#A626A4", 
               shape = 17, 
               size = 4)
```

</div>

:::
::: {.column width="50%" }
- avec une fonction `geom_()`

<div class=small-code>

```{r}
#| label: geomstat
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
# Moyenne de Petal.Length
# pour chaque modalité de Species
# et affichage sur les boxplots
ggplot(data = iris) +
  aes(x = Species, 
      y = Petal.Length) +
  geom_boxplot() +
  geom_point(stat = "summary", 
             fun = "mean", 
             colour = "#A626A4", 
             shape = 17, 
             size = 4)
```

</div>

:::
::::
:::::
::::: {.column width="45%"}
<center>**Quelques équivalences "`stats`/`geoms`"**

| ***Statistics*** 	| **Geometry**       | 	
|:------------------|:-------------------|
| `stat_count()`    | `geom_bar()` 	     | 
| `stat_bin()`      | `geom_histogram()` |
| `stat_boxplot()`  | `geom_boxplot()`   |
| `stat_density()`  | `geom_density()` 	 | 
| `stat_quantile()` | `geom_quantile()`  |
| `stat_sum()`      | `geom_count()`     | 
| `stat_bindot()`   | `geom_dotplot()`   |

<br>
</center>

:::: {.columns}
::: {.column width="48%"}
- avec `geom_boxplot()`

<div class=small-code>

```{r}
#| label: geomboxplot
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
ggplot(data = iris) +
  aes(x = Species, 
      y = Petal.Length) +
  geom_boxplot()
```

</div>

:::
::: {.column width="48%"}
- avec `stat_boxplot()`

<div class=small-code>

```{r}
#| label: statboxplot
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-align: center
ggplot(data = iris) +
  aes(x = Species, 
      y = Petal.Length) +
  stat_boxplot()
```

</div>

:::
::::
:::::
::::::

####  Couche _coord_ {.smaller}
:::: {.columns}
::: {.column width="50%"}
- Permet de choisir le système de coordonnées dans lequel sont projetées les données
- Par défaut, il s'agit du système cartésien, mais on trouve d'autres systèmes :

  + `coord_equal()` : pour avoir la même échelle pour l'axe des abscisses et des ordonnées  (cartésiens)
  + `coord_flip()`: pour inverser l'axe des abscisses et des ordonnées
  + `coord_cartesian()` : pour fixer des limites
  + `coord_radial()` : pour les graphiques circulaires
  + `coord_map()` : pour différentes projections cartographiques

:::
::: {.column width="50%"}

<div class=small-code>

```{r}
#| label: coord
#| eval: true
#| include: true
#| message: false
#| warning: false
#| echo: true
#| fig-align: center
# Inversion axe des abscisses / axe des ordonnées
ggplot(data = iris) +
  aes(x = Sepal.Length, y = Petal.Length, 
      colour = Species) +
  geom_point() +
  coord_flip()
```

</div>

:::
::::

####  Couche _theme_ {.smaller}
Personnalise les composantes hors données du graphique : titres, étiquettes, polices, arrière-plan, grilles et légendes  

::::: {.columns}
:::: {.column width="35%"}
- **Utiliser** un thème prédéfini

![](img/ggplot2_themes.png){width="90%" fig-align="center" fig-alt="Thèmes ggplot."}

```{r}
#| label: theme
#| eval: false
#| include: true
#| message: false
#| warning: false
#| echo: true
# Graphique avec le theme Dark
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length) +
  geom_point() +
  theme_dark()
```

::: {.callout-note appearance="minimal"}
On peut définir le thème pour toute la durée de la session avec `theme_set()`

```{r}
#| label: themeset
#| eval: false
#| include: true
#| message: false
#| warning: false
#| echo: true
# Theme Dark pour tous les plots
theme_set(theme_dark)

ggplot() + ...
```

:::
::::
:::: {.column width="25%"}
- **Éditer** un thème, à l'aide de l'interface graphique du package [[{ggThemeAssist}]{.pkg}](https://github.com/calligross/ggthemeassist){target="_blank"}

::: {.callout-tip title="Comment ça marche ?"}
1. Sélectionner le code du graphique
2. Lancer la commande `ggThemeAssistAddin()`
3. Effectuer les modifications souhaitées sur les différents éléments

_Après validation dans l'interface, le code s'actualise dans le script_

:::

::: {.callout-note appearance="simple"}
On peut également modifier un thème existant avec `theme_update()`
:::
::::
:::: {.column width="40%"}
- **Créer** et **utiliser** son propre thème, pour personnaliser l'apparence des graphiques, en ajustant les divers éléments

<div class=small-code>

```{r}
#| label: themecustom
#| eval: false
#| include: true
#| message: false
#| warning: false
#| echo: true
# Création du thème
theme <- theme(element.name = element_function(), 
               element.name = element_function())

# Utilisation du thème
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length) +
  geom_point() +
  theme
```

</div>

::: {.callout-tip appearance="minimal"}
`r fontawesome::fa("globe", fill = "#A626A4")` Se reporter à la section [_theme_](https://ggplot2-book.org/themes){target="_blank"} de @Wickham2016ggplot2 pour plus de détails   
:::

::::
:::::

#### Couches additionnelles {.smaller}
:::: {.columns}
::: {.column width="35%"} 
- `scale_...()` : modifier les attributs liés
  + aux axes (échelles, limites, titre, format des chiffres par exemple) 
  + aux données représentées (couleurs, etc.)
- `ggtitle()` : titre du graphique
- `xlab()` : intitulé de l'axe des abscisses 
- `ylab()` : intitulé de l'axe des ordonnées
:::
::: {.column width="65%"}

```{r}
#| label: layeradd
#| eval: true
#| include: true
#| message: false
#| warning: false
#| echo: true
#| fig-height: 3.5
#| fig-align: center
# On modifie les limites des axes (abscisses et ordonnées) 
# et les titres
ggplot(data = iris) +
  aes(x = Sepal.Length, y = Petal.Length) +
  geom_point() +
  scale_x_continuous(limits = c(0, 8)) +
  scale_y_continuous(limits = c(0, 8), 
                     breaks = seq(from = 0, to = 8, by = 1)) +
  ggtitle(label = "Exemple de création d'un graphique {ggplot2}") +
  xlab(label = "Longueur des sépales") +
  ylab(label = "Longueur des pétales")
```

:::
::::

###   Sauvegarde des graphiques `ggplot`
Mêmes possibilités que pour les graphiques R standards mais on préfèrera utiliser la fonction `ggsave()` du package [[{ggplot2}]{.pkg}](https://ggplot2.tidyverse.org/){target="_blank"} à la fin de la création du graphique
```{r}
#| label: ggsave
#| eval: false
#| include: true
#| message: false
#| echo: true
ggplot(...) +
  ...
ggsave(filename = name.extension)
```

## Exemple de mise en forme d'un graphique {.scrollable}  
Refaisons le graphique personnalisé de la section @sec-graph, avec les commandes `ggplot`

<div class=small-code>

```{r}
#| label: exGraphggplot
#| eval: true
#| include: true
#| message: false
#| echo: true
#| output-location: slide
#| fig-height: 6
#| fig-align: center
# Création d'un data frame avec des statistiques sur les 2 variables étudiées
iris |> 
 dplyr::summarise(mean.SL = mean(Sepal.Length),
                  mean.PL = mean(Petal.Length),
                  max.SL = max(Sepal.Length),
                  max.PL = max(Petal.Length)) -> irisstats
# --- GRAPHIQUE
# Représentation des données
ggplot(data = iris) +
  aes(x = Sepal.Length, 
      y = Petal.Length, 
      color = Species) +      # couleur des points différente selon les valeurs de Species
  geom_point(shape = 1,       # type de symbole
             size = 1.5,      # taille des symboles
             stroke = 1.5) +  # épaisseur de la bordure des symboles
# Personnalisation des AXES
## Possibilité 1.
  scale_x_continuous(name = "axe des abscisses",    # titre pour l'axe des x
                     limits = c(0, 10),             # limites de l'axe des x
                     labels = scales::label_number(accuracy = 1)) +  # pas de décimales 
                                                                     # (0.1 pour 1 décimale)
## Possibilité 2.
  scale_y_continuous(limits = c(0, 10),            # limites de l'axe des y
                     labels = scales::label_number(accuracy = 1)) +  # pas de décimales
  ylab("axe des ordonnées") +                      # titre pour l'axe des y
  theme(axis.text.y = element_text(angle = 90)) +  # rotation des étiquettes
# Ajout de TITRE
  ggtitle(label = "Titre du graphique") +  # ajout d'un titre
# Personnalisation du titre
  theme(plot.title = element_text(size = 15,           # taille de police
                                  face = "bold",       # type de police
                                  colour = "#004949",  # couleur du titre
                                  hjust = 0.5)) +      # alignement 0=gauche, 0.5=centré, 1=droite
# Ajout de LÉGENDE
  scale_color_manual(name = "Iris",                        # titre de la légende
                     labels = levels(iris$Species),        # valeurs de la légende
                     values = hcl.colors(3, "viridis")) +  # couleur des symboles de la légende
# Personnalisation de la légende
  theme(legend.position = "right",                # position ("left", "top", "right", "bottom")
        legend.text = element_text(size = 10)) +  # taille de la légende
# Ajout de LIGNE
## horizontale
  geom_hline(yintercept = max(iris$Petal.Length),   # coupe l'axe des y à cette valeur
             linetype = "dashed",                   # type de ligne
             linewidth = 0.5,                       # épaisseur de ligne
             color = "grey50") +                    # couleur de ligne
## verticale
  geom_vline(xintercept = max(iris$Sepal.Length),  # coupe l'axe des x à cette valeur
             linetype = "dashed",                  # type de ligne
             linewidth = 0.5,                      # épaisseur de ligne
             color = "grey50") +                   # couleur de ligne
# Ajout de POINT
   geom_point(data = irisstats,
              aes(x = mean.SL,     # coordonnée x du point
                  y = mean.PL),    # coordonnée y du point
              colour = "#FF6DB6",  # couleur du symbole
              shape = 15,          # type de symbole
              size = 3) +          # taille du symbole
# Ajout de TEXTE
  annotate("text",
           label = "valeur moyenne",      # texte à afficher
           x = irisstats$mean.SL + 1,     # emplacement horizontal du texte (centre)
           y = irisstats$mean.PL - 0.25,  # emplacement vertical du texte (centre) 
           colour = "#FF6DB6",            # couleur du texte
           fontface = 'italic') +         # style du texte
# Ajout de SOURCE
  labs(caption = "Source : data(iris)") +  # texte à afficher
# Personnalisation de la source 
  theme(plot.caption = element_text(hjust = 0,             # alignement 0=gauche, 0.5=centré, 1=droite
                                    size = 10,             # taille du texte
                                    colour = "slategrey")) # couleur du texte
```

</div>

## Des aides pour faciliter la réalisation des graphiques [`{ggplot2}`](https://ggplot2.tidyverse.org/){target="_blank"}
- [`{esquisse}`](https://github.com/dreamRs/esquisse){target="_blank"}, une interface "clic bouton" pour créér des graphiques, avec la possibilité de récupérer les lignes de code
- [`{ggrepel}`](https://ggrepel.slowkow.com/){target="_blank"} pour placer les étiquettes dans les graphiques sans qu'elles ne se superposent
- Des ressources en ligne

  `r fontawesome::fa("book", fill = "#A626A4")` [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org){target="_blank"}  
  `r fontawesome::fa("book", fill = "#A626A4")` [R Graphics Cookbook, 2nd edition](https://r-graphics.org){target="_blank"}  
  `r fontawesome::fa("book", fill = "#A626A4")` [Data Visualization & Information Design](https://www.cedricscherer.com){target="_blank"}  
  `r fontawesome::fa("book", fill = "#A626A4")` [ggplot2extensions](https://exts.ggplot2.tidyverse.org){target="_blank"} qui recense les extensions développées par les utilisateurs de R  
  `r fontawesome::fa("book", fill = "#A626A4")` [r-charts](https://r-charts.com){target="_blank"} pour trouver des exemples de code pour les graphiques (y compris graphiques en R de base) et les couleurs

# POUR ALLER PLUS LOIN {.inverse}

## Graphiques animés 
- Les graphiques réalisés en base R ou avec le package [`{ggplot2}`](https://ggplot2.tidyverse.org/){target="_blank"} sont statiques
- Il est possible d'animer ces graphiques, pour des présentations ou des applications web
- Plusieurs packages pour réaliser des **graphiques animés**

### Package [`{plotly}`](https://plotly.com/r/){target="_blank"}  
<div class=tiny-code>

```{r}
#| label: plotly
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 5
#| fig-align: center
ggplot(iris) +
  aes(x = Sepal.Length, y = Petal.Length, color = Species) +
  geom_point() -> p
# Infobulle pour afficher les valeurs de Species, Sepal.Length et Petal.Length au survol d'un point
plotly::ggplotly(p)
```

</div>

### Package [`{ggiraph}`](https://davidgohel.github.io/ggiraph/){target="_blank"}

<div class=tiny-code>

```{r}
#| label: ggiraph
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 3.5
#| fig-align: center
ggplot(iris) +
  ggiraph::geom_point_interactive(aes(x = Sepal.Length, 
                                      y = Petal.Length, 
                                      tooltip = Species, 
                                      data_id = row.names(iris))) -> p
# Infobulle pour afficher la valeur de Species au clic sur un point
ggiraph::girafe(ggobj = p)
```

</div>

### Package [`{gganimate}`](https://gganimate.com/){target="_blank"}

<div class=tiny-code>

```{r}
#| label: gganimate
#| eval: true
#| include: true
#| message: false
#| echo: true
#| fig-height: 3.5
#| fig-align: center
 ggplot(iris) +
  aes(x = Sepal.Length, y = Petal.Length) + 
  geom_point() +
  # Affichage des points animé selon les modalités de Species
  gganimate::transition_states(states = Species,       # état
                               transition_length = 2,  # durée de transition 
                               state_length = 3,       # durée de pause 
                               wrap = TRUE) +          # transition dernier - premier
  labs(title = "{closest_state}") # affichage de la valeur de la modalité dans le titre
```

</div>

## Autres productions
:::: {.columns}
::: {.column width="50%"}
- **Cartes**
  + package [`{ggmap}`](https://github.com/dkahle/ggmap){target="_blank"}
  + package [`{leaflet}`](https://github.com/rstudio/leaflet){target="_blank"}
  + packages [`{sf}` & `{mapsf}`](https://riatelab.github.io/mapsf/){target="_blank"} pour les traitements spatiaux et la cartographie "comme un pro"
  
![](img/mf-map.png){width="75%" fig-align="center" fig-alt="map sf"}

<center><small>Source : [mapsf](https://riatelab.github.io/mapsf/index.html){target="_blank"}</small></center>

:::
::: {.column width="50%"}
- **Applications web**
  + package [[{shiny}]{.pkg}](https://shiny.posit.co/){target="_blank"} pour développer des applications interactives d'analyse et de visualisation des données

![](img/shiny.png){width="60%" fig-align="center" fig-alt="shiny"}

<center><small>Source : [Shiny](https://shiny.posit.co/){target="_blank"}</small></center>

:::
::::

# RÉFÉRENCES {.inverse}

---

---
nocite: |
  @Tennekes2024cols4all, @Pedersen2024gganimate, @Gohel2024ggiraph, @Kahle2013ggmap, @Kahle2023ggmap, @Wickham2024ggplot2, @Wickham2016ggplot2, @Gross2016ggthemeassist, @Sievert2020plotly, @Sievert2020shiny, @Sarkar2008lattice, @Sarkar2024lattice, @Cheng2024leaflet, @Giraud2024mapsf, @Hvitfeldt2024paletteer, @Sievert2024plotly, @RCT2024, @Neuwirth2022rcolorbrewer, @Pebesma2024sf, @Chang2024shiny, @Insee2018GuideSemioGraph, @Insee2018GuideSemioCarto
---
